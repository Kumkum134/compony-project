Folder Structure
You can organize your project as follows:

project-root/
├── backend/    # For the backend (Node.js, Express)
├── frontend/   # For the frontend (React with Vite)
└── package.json


Commands for Setting Up the Project
1. Create the Project Root
mkdir my-fullstack-app
cd my-fullstack-app

2. Set Up the Backend
Create the backend directory:
mkdir backend
cd backend

Initialize a Node.js project:
npm init -y

Install dependencies:
npm install express cors body-parser dotenv
npm install --save-dev nodemon

Create the main server file (e.g., server.js):
touch server.js

Backend Example Code (server.js)
const express = require("express");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (req, res) => {
  res.send("Hello from the backend!");
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

Add a script to package.json for running the server with Nodemon:
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}

3. Set Up the Frontend
Go back to the root directory and create the frontend directory:
cd ..
mkdir frontend
cd frontend

Create a React app with Vite:
npm create vite@latest

Follow the prompts to select React and JavaScript/TypeScript.
Install dependencies:
npm install

Start the development server:
npm run dev

4. Integrate Frontend and Backend
Connecting the Frontend to the Backend

Use Axios to make API calls from the frontend to the backend:
npm install axios

Example API Call (e.g., in App.jsx):
import React, { useEffect, useState } from "react";
import axios from "axios";

const App = () => {
  const [message, setMessage] = useState("");

  useEffect(() => {
    axios.get("http://localhost:5000/")
      .then(response => setMessage(response.data))
      .catch(error => console.error(error));
  }, []);

  return <h1>{message}</h1>;
};

export default App;

5. Run Both Servers Simultaneously

Install concurrently to run both frontend and backend:
npm install -g concurrently

Update the root package.json with the following scripts:
"scripts": {
  "start": "concurrently \"npm run server\" \"npm run client\"",
  "server": "cd backend && npm run dev",
  "client": "cd frontend && npm run dev"
}

Start both servers:
npm run start

6. Deployment
Frontend Deployment: Deploy the frontend on Vercel or Netlify.
Backend Deployment: Deploy the backend on Render, Heroku, or AWS.